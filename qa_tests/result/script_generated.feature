Below are the Cucumber scripts generated for the provided test cases, following the guidelines and using the available web elements and steps.

### Test Case: HKGCM-001

gherkin
Feature: HongKong - New Instruction Creation

  @critical
  Scenario Outline: HKGCM-001 - Test the creation of a new instruction via "NewInstruction" button by KL LOANS OPS-PROCESSING -MAKER

    # ***************************************************************
    # STEP 1: Log in to the system as KL LOANS OPS-PROCESSING -MAKER
    # ***************************************************************
    Given Login as "<user_role>"
    Then WebAgent is on "<platform>"

    # ***************************************************************
    # STEP 2: Click on the "NewInstruction" button
    # ***************************************************************
    When WebAgent click on newInstructionButton
    Then WebAgent is on newInstructionPage

    # ***************************************************************
    # STEP 3: Fill in all required information for the instruction
    # ***************************************************************
    When WebAgent type "<instruction_details>" into instructionDetailsTextbox
    And WebAgent click on submitButton

    # ***************************************************************
    # STEP 4: Submit the instruction by clicking on "Maker Submit"
    # ***************************************************************
    Then WebAgent click on makerSubmitButton
    And Check Process Status is "KL LOANS - PROCESSING-CHECKER"
    And Check ticket Status is "KL LOANS OPS"

    Examples:
      | user_role                       | platform   | instruction_details |
      | KL LOANS OPS-PROCESSING -MAKER  | HK Loans   | Instruction Details |


### Test Case: HKGCM-002

gherkin
Feature: HongKong - Report Item Instruction Creation

  @high
  Scenario Outline: HKGCM-002 - Test the creation of a new instruction via opening "Report item" by KL LOANS OPS-PROCESSING -MAKER

    # ***************************************************************
    # STEP 1: Log in to the system as KL LOANS OPS-PROCESSING -MAKER
    # ***************************************************************
    Given Login as "<user_role>"
    Then WebAgent is on "<platform>"

    # ***************************************************************
    # STEP 2: Open the "Report item" section
    # ***************************************************************
    When WebAgent click on reportItemSection
    Then WebAgent see reportItemsDisplayed

    # ***************************************************************
    # STEP 3: Upload Maturity Report and generate items
    # ***************************************************************
    When WebAgent type "<maturity_report>" into uploadMaturityReportTextbox
    And WebAgent click on generateItemsButton
    Then WebAgent see itemsAutoGenerated

    # ***************************************************************
    # STEP 4: Follow KL Loans Workflow actions and submit to KL LOANS OPS-PROCESSING -CHECKER
    # ***************************************************************
    When WebAgent click on workflowActionsButton
    And WebAgent click on submitToCheckerButton
    Then Check Process Status is "KL LOANS - PROCESSING-CHECKER"
    And Check ticket Status is "KL LOANS OPS"

    Examples:
      | user_role                       | platform   | maturity_report |
      | KL LOANS OPS-PROCESSING -MAKER  | HK Loans   | Maturity Report |


### Test Case: HKGCM-003

gherkin
Feature: HongKong - Workflow Actions

  @medium
  Scenario Outline: HKGCM-003 - Test the workflow actions of KL LOANS OPS-PROCESSING -MAKER in HKGCM

    # ***************************************************************
    # STEP 1: Log in to the system as KL LOANS OPS-PROCESSING -MAKER
    # ***************************************************************
    Given Login as "<user_role>"
    Then WebAgent is on "<platform>"

    # ***************************************************************
    # STEP 2: Create an instruction with full information via "New Instruction"
    # ***************************************************************
    When WebAgent click on newInstructionButton
    And WebAgent type "<instruction_details>" into instructionDetailsTextbox
    Then Check Process Status is "KL LOANS - PROCESSING-CHECKER"
    And Check ticket Status is "KL LOANS OPS"

    # ***************************************************************
    # STEP 3: Perform "Maker Submit" action
    # ***************************************************************
    When WebAgent click on makerSubmitButton
    Then Check Process Status is "DRAWDOWN-QC"

    # ***************************************************************
    # STEP 4: Perform "Submit to QC" action if QC REQUIRE is true
    # ***************************************************************
    When WebAgent check on qcRequireCheckbox if exist
    And WebAgent click on submitToQCButton
    Then Check Process Status is "DRAWDOWN-QC"

    # ***************************************************************
    # STEP 5: Perform "Complete" action if QC REQUIRE is false
    # ***************************************************************
    When WebAgent uncheck on qcRequireCheckbox if exist
    And WebAgent click on completeButton
    Then Check ticket Status is "COMPLETED"
    And Check Process Status is "COMPLETED"

    Examples:
      | user_role                       | platform   | instruction_details |
      | KL LOANS OPS-PROCESSING -MAKER  | HK Loans   | Instruction Details |


### Comments
- The web elements `newInstructionButton`, `instructionDetailsTextbox`, `submitButton`, `makerSubmitButton`, `reportItemSection`, `uploadMaturityReportTextbox`, `generateItemsButton`, `workflowActionsButton`, `submitToCheckerButton`, `qcRequireCheckbox`, and `completeButton` need to be defined in the system.
- The steps `WebAgent is on newInstructionPage`, `WebAgent see reportItemsDisplayed`, `WebAgent see itemsAutoGenerated`, and `Check Process Status is "DRAWDOWN-QC"` need to be implemented in the system.

These scripts are designed to be clear, concise, and aligned with the provided test cases, ensuring they can be executed effectively within the testing framework.